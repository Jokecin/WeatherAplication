{"ast":null,"code":"var _jsxFileName = \"/home/joke/weather-frontend/src/components/CityAutocomplete.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\nimport \"./CityAutocomplete.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityAutocomplete = ({\n  onCitySelect\n}) => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const customStyles = {\n    control: provided => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\"\n    }),\n    menu: provided => ({\n      ...provided,\n      borderRadius: \"8px\",\n      marginTop: \"5px\",\n      zIndex: 10,\n      position: \"relative\"\n    })\n  };\n  const fetchCities = async inputValue => {\n    if (!inputValue) return;\n    setLoading(true);\n    try {\n      const response = await axios.get(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities\", {\n        params: {\n          namePrefix: inputValue\n        },\n        headers: {\n          \"X-RapidAPI-Key\": \"TU_API_KEY\",\n          \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\"\n        }\n      });\n      const cityOptions = response.data.data.map(city => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const debouncedFetchCities = debounce(inputValue => {\n    fetchCities(inputValue);\n  }, 300);\n  const handleInputChange = inputValue => {\n    if (inputValue) debouncedFetchCities(inputValue);\n  };\n  const handleChange = option => {\n    setSelectedOption(option);\n    onCitySelect(option === null || option === void 0 ? void 0 : option.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete-container\",\n    children: /*#__PURE__*/_jsxDEV(Select, {\n      value: selectedOption,\n      options: options,\n      isLoading: loading,\n      onInputChange: handleInputChange,\n      onChange: handleChange,\n      placeholder: \"Ingresa una ciudad\",\n      noOptionsMessage: () => \"Sin resultados\",\n      styles: customStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(CityAutocomplete, \"aE2STYVETItbOxgSM5+rFe1Pjek=\");\n_c = CityAutocomplete;\nexport default CityAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"CityAutocomplete\");","map":{"version":3,"names":["React","useState","axios","Select","debounce","jsxDEV","_jsxDEV","CityAutocomplete","onCitySelect","_s","options","setOptions","loading","setLoading","selectedOption","setSelectedOption","customStyles","control","provided","borderRadius","border","padding","fontSize","menu","marginTop","zIndex","position","fetchCities","inputValue","response","get","params","namePrefix","headers","cityOptions","data","map","city","value","label","country","error","console","debouncedFetchCities","handleInputChange","handleChange","option","className","children","isLoading","onInputChange","onChange","placeholder","noOptionsMessage","styles","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/joke/weather-frontend/src/components/CityAutocomplete.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\nimport \"./CityAutocomplete.css\";\n\nconst CityAutocomplete = ({ onCitySelect }) => {\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  const customStyles = {\n    control: (provided) => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\",\n    }),\n    menu: (provided) => ({\n      ...provided,\n      borderRadius: \"8px\",\n      marginTop: \"5px\",\n      zIndex: 10,\n      position: \"relative\",\n    }),\n  };\n\n  const fetchCities = async (inputValue) => {\n    if (!inputValue) return;\n    setLoading(true);\n    try {\n      const response = await axios.get(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities\", {\n        params: { namePrefix: inputValue },\n        headers: {\n          \"X-RapidAPI-Key\": \"TU_API_KEY\",\n          \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\",\n        },\n      });\n      const cityOptions = response.data.data.map((city) => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`,\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const debouncedFetchCities = debounce((inputValue) => {\n    fetchCities(inputValue);\n  }, 300);\n\n  const handleInputChange = (inputValue) => {\n    if (inputValue) debouncedFetchCities(inputValue);\n  };\n\n  const handleChange = (option) => {\n    setSelectedOption(option);\n    onCitySelect(option?.value);\n  };\n\n  return (\n    <div className=\"autocomplete-container\">\n      <Select\n        value={selectedOption}\n        options={options}\n        isLoading={loading}\n        onInputChange={handleInputChange}\n        onChange={handleChange}\n        placeholder=\"Ingresa una ciudad\"\n        noOptionsMessage={() => \"Sin resultados\"}\n        styles={customStyles}\n      />\n    </div>\n  );\n};\n\nexport default CityAutocomplete;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}