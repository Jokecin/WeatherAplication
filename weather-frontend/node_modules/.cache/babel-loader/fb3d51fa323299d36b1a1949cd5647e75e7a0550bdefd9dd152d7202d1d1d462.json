{"ast":null,"code":"var _jsxFileName = \"/home/joke/weather-frontend/src/components/CityAutocomplete.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityAutocomplete = ({\n  onCitySelect\n}) => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Define los estilos personalizados para React Select\n  const customStyles = {\n    control: provided => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\"\n    }),\n    menu: provided => ({\n      ...provided,\n      borderRadius: \"8px\",\n      marginTop: \"5px\"\n    }),\n    placeholder: provided => ({\n      ...provided,\n      fontStyle: \"italic\",\n      color: \"#aaa\"\n    })\n  };\n  const fetchCities = async inputValue => {\n    if (!inputValue) return [];\n    setLoading(true);\n    try {\n      const response = await axios.get(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities\", {\n        params: {\n          namePrefix: inputValue\n        },\n        headers: {\n          \"X-RapidAPI-Key\": \"TU_API_KEY\",\n          // Reemplaza con tu API key\n          \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\"\n        }\n      });\n\n      // Mapea los resultados al formato que React Select espera\n      return response.data.data.map(city => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`\n      }));\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleInputChange = async inputValue => {\n    const cities = await fetchCities(inputValue);\n    setOptions(cities); // Actualiza las opciones con los resultados\n  };\n  const handleChange = selectedOption => {\n    onCitySelect(selectedOption.value); // Devuelve la ciudad seleccionada al componente padre\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Select, {\n      options: options,\n      isLoading: loading,\n      onInputChange: handleInputChange // Manejar cambios en el campo de entrada\n      ,\n      onChange: handleChange // Manejar la selección de una ciudad\n      ,\n      placeholder: \"Ingresa una ciudad\",\n      noOptionsMessage: () => \"Sin resultados\",\n      styles: customStyles // Aplica los estilos personalizados\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(CityAutocomplete, \"t+IfsHiAhCrcZeSmj4fRE65iBt8=\");\n_c = CityAutocomplete;\nexport default CityAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"CityAutocomplete\");","map":{"version":3,"names":["React","useState","axios","Select","jsxDEV","_jsxDEV","CityAutocomplete","onCitySelect","_s","options","setOptions","loading","setLoading","customStyles","control","provided","borderRadius","border","padding","fontSize","menu","marginTop","placeholder","fontStyle","color","fetchCities","inputValue","response","get","params","namePrefix","headers","data","map","city","value","label","country","error","console","handleInputChange","cities","handleChange","selectedOption","children","isLoading","onInputChange","onChange","noOptionsMessage","styles","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/joke/weather-frontend/src/components/CityAutocomplete.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\n\nconst CityAutocomplete = ({ onCitySelect }) => {\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Define los estilos personalizados para React Select\n  const customStyles = {\n    control: (provided) => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\",\n    }),\n    menu: (provided) => ({\n      ...provided,\n      borderRadius: \"8px\",\n      marginTop: \"5px\",\n    }),\n    placeholder: (provided) => ({\n      ...provided,\n      fontStyle: \"italic\",\n      color: \"#aaa\",\n    }),\n  };\n\n  const fetchCities = async (inputValue) => {\n    if (!inputValue) return [];\n\n    setLoading(true);\n    try {\n      const response = await axios.get(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities\", {\n        params: {\n          namePrefix: inputValue,\n        },\n        headers: {\n          \"X-RapidAPI-Key\": \"TU_API_KEY\", // Reemplaza con tu API key\n          \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\",\n        },\n      });\n\n      // Mapea los resultados al formato que React Select espera\n      return response.data.data.map((city) => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = async (inputValue) => {\n    const cities = await fetchCities(inputValue);\n    setOptions(cities); // Actualiza las opciones con los resultados\n  };\n\n  const handleChange = (selectedOption) => {\n    onCitySelect(selectedOption.value); // Devuelve la ciudad seleccionada al componente padre\n  };\n\n  return (\n    <div>\n      <Select\n        options={options}\n        isLoading={loading}\n        onInputChange={handleInputChange} // Manejar cambios en el campo de entrada\n        onChange={handleChange} // Manejar la selección de una ciudad\n        placeholder=\"Ingresa una ciudad\"\n        noOptionsMessage={() => \"Sin resultados\"}\n        styles={customStyles} // Aplica los estilos personalizados\n      />\n    </div>\n  );\n};\n\nexport default CityAutocomplete;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}