{"ast":null,"code":"var _jsxFileName = \"/home/joke/weather-frontend/src/components/CityAutocomplete.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityAutocomplete = ({\n  onCitySelect\n}) => {\n  _s();\n  const [options, setOptions] = useState([]); // Opciones del autocompletado\n  const [loading, setLoading] = useState(false); // Estado de carga\n  const [selectedOption, setSelectedOption] = useState(null); // Opción seleccionada\n  const [inputValue, setInputValue] = useState(\"\"); // Valor temporal del input\n\n  // Estilos personalizados\n  const customStyles = {\n    control: provided => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\"\n    }),\n    menu: provided => ({\n      ...provided,\n      zIndex: 999 // Asegura que el menú se renderice sobre otros elementos\n    })\n  };\n\n  // Función para buscar ciudades en tu backend\n  const fetchCities = async input => {\n    if (!input) return; // No busca si el input está vacío\n    setLoading(true);\n    try {\n      const response = await axios.get(\"http://localhost:8080/api/geo/cities\", {\n        params: {\n          query: input\n        } // Envía el parámetro 'query' al backend\n      });\n      const cityOptions = response.data.map(city => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities from backend:\", error);\n      setOptions([]); // Limpia las opciones en caso de error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Debounce para evitar llamadas excesivas al backend\n  const debouncedFetchCities = debounce(input => fetchCities(input), 300);\n\n  // Manejar cambios en el input\n  const handleInputChange = newValue => {\n    setInputValue(newValue); // Guarda el valor temporal del input\n    debouncedFetchCities(newValue); // Llama a la API con debounce\n  };\n\n  // Manejar selección de ciudad\n  const handleChange = option => {\n    setSelectedOption(option); // Guarda la opción seleccionada\n    setInputValue((option === null || option === void 0 ? void 0 : option.label) || \"\"); // Persiste el valor en el input\n    onCitySelect(option === null || option === void 0 ? void 0 : option.value); // Devuelve la ciudad seleccionada al componente padre\n  };\n  return /*#__PURE__*/_jsxDEV(Select, {\n    options: options // Opciones disponibles\n    ,\n    isLoading: loading // Indicador de carga\n    ,\n    value: selectedOption // Controla la opción seleccionada\n    ,\n    inputValue: inputValue // Controla el valor del input\n    ,\n    onInputChange: handleInputChange // Maneja cambios en el input\n    ,\n    onChange: handleChange // Maneja selección de opción\n    ,\n    placeholder: \"Ingresa una ciudad\",\n    noOptionsMessage: () => \"Sin resultados\",\n    styles: customStyles,\n    blurInputOnSelect: false // No borra el input al perder foco\n    ,\n    backspaceRemovesValue: false // No borra al presionar Backspace\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(CityAutocomplete, \"VB6DPspFvxrdtmzHx/BHWP7hLgY=\");\n_c = CityAutocomplete;\nexport default CityAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"CityAutocomplete\");","map":{"version":3,"names":["React","useState","axios","Select","debounce","jsxDEV","_jsxDEV","CityAutocomplete","onCitySelect","_s","options","setOptions","loading","setLoading","selectedOption","setSelectedOption","inputValue","setInputValue","customStyles","control","provided","borderRadius","border","padding","fontSize","menu","zIndex","fetchCities","input","response","get","params","query","cityOptions","data","map","city","value","label","country","error","console","debouncedFetchCities","handleInputChange","newValue","handleChange","option","isLoading","onInputChange","onChange","placeholder","noOptionsMessage","styles","blurInputOnSelect","backspaceRemovesValue","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/joke/weather-frontend/src/components/CityAutocomplete.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\n\nconst CityAutocomplete = ({ onCitySelect }) => {\n  const [options, setOptions] = useState([]); // Opciones del autocompletado\n  const [loading, setLoading] = useState(false); // Estado de carga\n  const [selectedOption, setSelectedOption] = useState(null); // Opción seleccionada\n  const [inputValue, setInputValue] = useState(\"\"); // Valor temporal del input\n\n  // Estilos personalizados\n  const customStyles = {\n    control: (provided) => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\",\n    }),\n    menu: (provided) => ({\n      ...provided,\n      zIndex: 999, // Asegura que el menú se renderice sobre otros elementos\n    }),\n  };\n\n  // Función para buscar ciudades en tu backend\n  const fetchCities = async (input) => {\n    if (!input) return; // No busca si el input está vacío\n    setLoading(true);\n    try {\n      const response = await axios.get(\"http://localhost:8080/api/geo/cities\", {\n        params: { query: input }, // Envía el parámetro 'query' al backend\n      });\n\n      const cityOptions = response.data.map((city) => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`,\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities from backend:\", error);\n      setOptions([]); // Limpia las opciones en caso de error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Debounce para evitar llamadas excesivas al backend\n  const debouncedFetchCities = debounce((input) => fetchCities(input), 300);\n\n  // Manejar cambios en el input\n  const handleInputChange = (newValue) => {\n    setInputValue(newValue); // Guarda el valor temporal del input\n    debouncedFetchCities(newValue); // Llama a la API con debounce\n  };\n\n  // Manejar selección de ciudad\n  const handleChange = (option) => {\n    setSelectedOption(option); // Guarda la opción seleccionada\n    setInputValue(option?.label || \"\"); // Persiste el valor en el input\n    onCitySelect(option?.value); // Devuelve la ciudad seleccionada al componente padre\n  };\n\n  return (\n    <Select\n      options={options} // Opciones disponibles\n      isLoading={loading} // Indicador de carga\n      value={selectedOption} // Controla la opción seleccionada\n      inputValue={inputValue} // Controla el valor del input\n      onInputChange={handleInputChange} // Maneja cambios en el input\n      onChange={handleChange} // Maneja selección de opción\n      placeholder=\"Ingresa una ciudad\"\n      noOptionsMessage={() => \"Sin resultados\"}\n      styles={customStyles}\n      blurInputOnSelect={false} // No borra el input al perder foco\n      backspaceRemovesValue={false} // No borra al presionar Backspace\n    />\n  );\n};\n\nexport default CityAutocomplete;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}