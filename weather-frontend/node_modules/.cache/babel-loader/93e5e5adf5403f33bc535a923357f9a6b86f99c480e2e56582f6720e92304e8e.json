{"ast":null,"code":"var _jsxFileName = \"/home/joke/weather-frontend/src/components/CityAutocomplete.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityAutocomplete = ({\n  onCitySelect\n}) => {\n  _s();\n  const [options, setOptions] = useState([]); // Opciones del autocompletado\n  const [loading, setLoading] = useState(false); // Estado de carga\n  const [selectedOption, setSelectedOption] = useState(null); // Opción seleccionada\n  const [inputValue, setInputValue] = useState(\"\"); // Valor temporal del input\n  const [isAutocompleteEnabled, setIsAutocompleteEnabled] = useState(true); // Estado del checkbox\n\n  // Estilos personalizados\n  const customStyles = {\n    control: provided => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\"\n    }),\n    menu: provided => ({\n      ...provided,\n      zIndex: 999 // Asegura que el menú se renderice sobre otros elementos\n    })\n  };\n\n  // Función para buscar ciudades en el backend\n  const fetchCities = async input => {\n    if (!input) return; // Evita llamadas innecesarias si el input está vacío\n    setLoading(true);\n    try {\n      const response = await axios.get(\"http://localhost:8080/api/geo/cities\", {\n        params: {\n          query: input\n        }\n      });\n      const cityOptions = response.data.map(city => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities from backend:\", error);\n      setOptions([]); // Limpia las opciones en caso de error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Debounce para evitar llamadas excesivas al backend\n  const debouncedFetchCities = debounce(input => {\n    if (isAutocompleteEnabled) {\n      fetchCities(input);\n    } else {\n      setOptions([]); // Limpia opciones si el autocompletado está desactivado\n    }\n  }, 300);\n\n  // Manejar cambios en el input\n  const handleInputChange = newValue => {\n    setInputValue(newValue); // Guarda el valor temporal del input\n    if (isAutocompleteEnabled) {\n      debouncedFetchCities(newValue);\n    }\n  };\n\n  // Manejar selección de ciudad\n  const handleChange = option => {\n    setSelectedOption(option); // Guarda la opción seleccionada\n    setInputValue((option === null || option === void 0 ? void 0 : option.label) || \"\"); // Persiste el valor en el input\n    onCitySelect(option === null || option === void 0 ? void 0 : option.value); // Devuelve la ciudad seleccionada al componente padre\n  };\n\n  // Manejar el cambio del checkbox\n  const handleCheckboxChange = () => {\n    setIsAutocompleteEnabled(prev => !prev); // Activa/desactiva el autocompletado\n    if (!isAutocompleteEnabled) {\n      setOptions([]); // Limpia las opciones al desactivar\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        marginBottom: \"10px\",\n        display: \"block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: isAutocompleteEnabled,\n        onChange: handleCheckboxChange,\n        style: {\n          marginRight: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), \"Activar autocompletado\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: isAutocompleteEnabled ? options : [] // Solo muestra opciones si está habilitado\n      ,\n      isLoading: loading // Indicador de carga\n      ,\n      value: selectedOption // Controla la opción seleccionada\n      ,\n      inputValue: inputValue // Controla el valor del input\n      ,\n      onInputChange: handleInputChange // Maneja cambios en el input\n      ,\n      onChange: handleChange // Maneja selección de opción\n      ,\n      placeholder: \"Ingresa una ciudad\",\n      noOptionsMessage: () => isAutocompleteEnabled ? \"Sin resultados\" : \"\" // No muestra mensaje si está deshabilitado\n      ,\n      styles: customStyles,\n      blurInputOnSelect: false // No borra el input al perder foco\n      ,\n      menuIsOpen: isAutocompleteEnabled || options.length > 0 // Asegura que no muestre el menú si está deshabilitado\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(CityAutocomplete, \"NZWK4+B5T8kMdVSmiBa8+2kzqpI=\");\n_c = CityAutocomplete;\nexport default CityAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"CityAutocomplete\");","map":{"version":3,"names":["React","useState","axios","Select","debounce","jsxDEV","_jsxDEV","CityAutocomplete","onCitySelect","_s","options","setOptions","loading","setLoading","selectedOption","setSelectedOption","inputValue","setInputValue","isAutocompleteEnabled","setIsAutocompleteEnabled","customStyles","control","provided","borderRadius","border","padding","fontSize","menu","zIndex","fetchCities","input","response","get","params","query","cityOptions","data","map","city","value","label","country","error","console","debouncedFetchCities","handleInputChange","newValue","handleChange","option","handleCheckboxChange","prev","children","style","marginBottom","display","type","checked","onChange","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","isLoading","onInputChange","placeholder","noOptionsMessage","styles","blurInputOnSelect","menuIsOpen","length","_c","$RefreshReg$"],"sources":["/home/joke/weather-frontend/src/components/CityAutocomplete.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\n\nconst CityAutocomplete = ({ onCitySelect }) => {\n  const [options, setOptions] = useState([]); // Opciones del autocompletado\n  const [loading, setLoading] = useState(false); // Estado de carga\n  const [selectedOption, setSelectedOption] = useState(null); // Opción seleccionada\n  const [inputValue, setInputValue] = useState(\"\"); // Valor temporal del input\n  const [isAutocompleteEnabled, setIsAutocompleteEnabled] = useState(true); // Estado del checkbox\n\n  // Estilos personalizados\n  const customStyles = {\n    control: (provided) => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\",\n    }),\n    menu: (provided) => ({\n      ...provided,\n      zIndex: 999, // Asegura que el menú se renderice sobre otros elementos\n    }),\n  };\n\n  // Función para buscar ciudades en el backend\n  const fetchCities = async (input) => {\n    if (!input) return; // Evita llamadas innecesarias si el input está vacío\n    setLoading(true);\n    try {\n      const response = await axios.get(\"http://localhost:8080/api/geo/cities\", {\n        params: { query: input },\n      });\n\n      const cityOptions = response.data.map((city) => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`,\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities from backend:\", error);\n      setOptions([]); // Limpia las opciones en caso de error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Debounce para evitar llamadas excesivas al backend\n  const debouncedFetchCities = debounce((input) => {\n    if (isAutocompleteEnabled) {\n      fetchCities(input);\n    } else {\n      setOptions([]); // Limpia opciones si el autocompletado está desactivado\n    }\n  }, 300);\n\n  // Manejar cambios en el input\n  const handleInputChange = (newValue) => {\n    setInputValue(newValue); // Guarda el valor temporal del input\n    if (isAutocompleteEnabled) {\n      debouncedFetchCities(newValue);\n    }\n  };\n\n  // Manejar selección de ciudad\n  const handleChange = (option) => {\n    setSelectedOption(option); // Guarda la opción seleccionada\n    setInputValue(option?.label || \"\"); // Persiste el valor en el input\n    onCitySelect(option?.value); // Devuelve la ciudad seleccionada al componente padre\n  };\n\n  // Manejar el cambio del checkbox\n  const handleCheckboxChange = () => {\n    setIsAutocompleteEnabled((prev) => !prev); // Activa/desactiva el autocompletado\n    if (!isAutocompleteEnabled) {\n      setOptions([]); // Limpia las opciones al desactivar\n    }\n  };\n\n  return (\n    <div>\n      {/* Checkbox para activar/desactivar autocompletado */}\n      <label style={{ marginBottom: \"10px\", display: \"block\" }}>\n        <input\n          type=\"checkbox\"\n          checked={isAutocompleteEnabled}\n          onChange={handleCheckboxChange}\n          style={{ marginRight: \"10px\" }}\n        />\n        Activar autocompletado\n      </label>\n\n      {/* Input de selección con autocompletado */}\n      <Select\n        options={isAutocompleteEnabled ? options : []} // Solo muestra opciones si está habilitado\n        isLoading={loading} // Indicador de carga\n        value={selectedOption} // Controla la opción seleccionada\n        inputValue={inputValue} // Controla el valor del input\n        onInputChange={handleInputChange} // Maneja cambios en el input\n        onChange={handleChange} // Maneja selección de opción\n        placeholder=\"Ingresa una ciudad\"\n        noOptionsMessage={() =>\n          isAutocompleteEnabled ? \"Sin resultados\" : \"\"\n        } // No muestra mensaje si está deshabilitado\n        styles={customStyles}\n        blurInputOnSelect={false} // No borra el input al perder foco\n        menuIsOpen={isAutocompleteEnabled || options.length > 0} // Asegura que no muestre el menú si está deshabilitado\n      />\n    </div>\n  );\n};\n\nexport default CityAutocomplete;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}