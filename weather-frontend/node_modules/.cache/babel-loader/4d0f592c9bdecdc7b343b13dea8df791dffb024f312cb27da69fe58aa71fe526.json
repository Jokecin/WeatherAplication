{"ast":null,"code":"var _jsxFileName = \"/home/joke/weather-frontend/src/components/Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport CityAutocomplete from \"./CityAutocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = () => {\n  _s();\n  const [city, setCity] = useState(\"\"); // Ciudad ingresada por el usuario\n  const [weatherData, setWeatherData] = useState(null); // Datos del clima\n  const [error, setError] = useState(null); // Mensaje de error\n\n  // Función para realizar la consulta al backend\n  const fetchWeather = async () => {\n    try {\n      setError(null); // Reinicia el estado de error\n      const response = await axios.get(\"http://localhost:8080/api/weather\", {\n        params: {\n          city\n        } // Enviar la ciudad como parámetro\n      });\n      setWeatherData(response.data); // Almacena los datos en el estado\n    } catch (err) {\n      setError(\"No se pudo obtener el clima. Verifica el nombre de la ciudad.\");\n      setWeatherData(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Consulta el Clima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CityAutocomplete, {\n      onCitySelect: selectedCity => setCity(selectedCity)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchWeather,\n      disabled: !city,\n      children: \"Consultar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"Qu9kpc/8i1iAwrHa8TtdGyZ8Km4=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","axios","CityAutocomplete","jsxDEV","_jsxDEV","Weather","_s","city","setCity","weatherData","setWeatherData","error","setError","fetchWeather","response","get","params","data","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCitySelect","selectedCity","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/joke/weather-frontend/src/components/Weather.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport CityAutocomplete from \"./CityAutocomplete\";\n\nconst Weather = () => {\n  const [city, setCity] = useState(\"\"); // Ciudad ingresada por el usuario\n  const [weatherData, setWeatherData] = useState(null); // Datos del clima\n  const [error, setError] = useState(null); // Mensaje de error\n\n  // Función para realizar la consulta al backend\n  const fetchWeather = async () => {\n    try {\n      setError(null); // Reinicia el estado de error\n      const response = await axios.get(\"http://localhost:8080/api/weather\", {\n        params: { city }, // Enviar la ciudad como parámetro\n      });\n      setWeatherData(response.data); // Almacena los datos en el estado\n    } catch (err) {\n      setError(\"No se pudo obtener el clima. Verifica el nombre de la ciudad.\");\n      setWeatherData(null);\n    }\n  };\n\n  return (\n    <div className=\"weather\">\n      <h1>Consulta el Clima</h1>\n      <CityAutocomplete onCitySelect={(selectedCity) => setCity(selectedCity)} />\n      <button onClick={fetchWeather} disabled={!city}>\n        Consultar\n      </button>\n\n      {/* {error && <p className=\"error\">{error}</p>}\n      {weatherData && (\n        <div className=\"weather-info\">\n          <h2>{weatherData.name}</h2>\n          <p>Temperatura: {weatherData.main.temp}°C</p>\n          <p>Sensación Térmica: {weatherData.main.feels_like}°C</p>\n          <p>Clima: {weatherData.weather[0].description}</p>\n        </div>\n      )} */}\n    </div>\n  );\n};\n\nexport default Weather;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACA,MAAMa,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFD,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;MAChB,MAAME,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,mCAAmC,EAAE;QACpEC,MAAM,EAAE;UAAET;QAAK,CAAC,CAAE;MACpB,CAAC,CAAC;MACFG,cAAc,CAACI,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZN,QAAQ,CAAC,+DAA+D,CAAC;MACzEF,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,oBACEN,OAAA;IAAKe,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBhB,OAAA;MAAAgB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BpB,OAAA,CAACF,gBAAgB;MAACuB,YAAY,EAAGC,YAAY,IAAKlB,OAAO,CAACkB,YAAY;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3EpB,OAAA;MAAQuB,OAAO,EAAEd,YAAa;MAACe,QAAQ,EAAE,CAACrB,IAAK;MAAAa,QAAA,EAAC;IAEhD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAWN,CAAC;AAEV,CAAC;AAAClB,EAAA,CAtCID,OAAO;AAAAwB,EAAA,GAAPxB,OAAO;AAwCb,eAAeA,OAAO;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}