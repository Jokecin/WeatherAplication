{"ast":null,"code":"var _jsxFileName = \"/home/joke/weather-frontend/src/components/CityAutocomplete.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityAutocomplete = ({\n  onCitySelect,\n  isAutocompleteEnabled\n}) => {\n  _s();\n  const [options, setOptions] = useState([]); // Opciones del autocompletado\n  const [loading, setLoading] = useState(false); // Estado de carga\n  const [selectedOption, setSelectedOption] = useState(null); // Opción seleccionada\n  const [inputValue, setInputValue] = useState(\"\"); // Valor del input\n\n  // Estilos personalizados\n  const customStyles = {\n    control: provided => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\"\n    }),\n    menu: provided => ({\n      ...provided,\n      zIndex: 999\n    })\n  };\n\n  // Llamada a la API para obtener ciudades\n  const fetchCities = async input => {\n    if (!input) return;\n    setLoading(true);\n    try {\n      const response = await axios.get(\"http://localhost:8080/api/geo/cities\", {\n        params: {\n          query: input\n        }\n      });\n      const cityOptions = response.data.map(city => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n      setOptions([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Debounce para limitar llamadas a la API\n  const debouncedFetchCities = debounce(input => {\n    if (isAutocompleteEnabled && input) {\n      fetchCities(input);\n    }\n  }, 300);\n\n  // Manejar cambios en el input\n  const handleInputChange = (newValue, {\n    action\n  }) => {\n    if (action === \"input-change\") {\n      setInputValue(newValue); // Actualiza el valor del input\n      debouncedFetchCities(newValue); // Realiza la búsqueda si está habilitado\n      if (!isAutocompleteEnabled) {\n        onCitySelect(newValue); // Envía el valor manualmente al componente padre\n      }\n    }\n  };\n\n  // Manejar la selección de una opción\n  const handleChange = option => {\n    if (option) {\n      const cityOnly = option.value.split(\",\")[0].trim(); // Extrae solo la ciudad\n      setSelectedOption(option);\n      setInputValue(option.label);\n      onCitySelect(cityOnly); // Envía solo la ciudad al componente padre\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Select, {\n    options: isAutocompleteEnabled ? options : [] // Opciones solo si está habilitado\n    ,\n    isLoading: loading // Estado de carga\n    ,\n    value: selectedOption // Opción seleccionada\n    ,\n    inputValue: inputValue // Valor del input\n    ,\n    onInputChange: handleInputChange // Maneja cambios en el input\n    ,\n    onChange: handleChange // Maneja selección de una opción\n    ,\n    placeholder: \"Ingresa una ciudad\",\n    noOptionsMessage: () => isAutocompleteEnabled && inputValue ? \"Sin resultados\" : null // Oculta mensaje cuando no es necesario\n    ,\n    styles: customStyles,\n    blurInputOnSelect: false // Evita borrar el input al seleccionar\n    ,\n    backspaceRemovesValue: false // Evita borrar opción seleccionada con Backspace\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(CityAutocomplete, \"VB6DPspFvxrdtmzHx/BHWP7hLgY=\");\n_c = CityAutocomplete;\nexport default CityAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"CityAutocomplete\");","map":{"version":3,"names":["React","useState","axios","Select","debounce","jsxDEV","_jsxDEV","CityAutocomplete","onCitySelect","isAutocompleteEnabled","_s","options","setOptions","loading","setLoading","selectedOption","setSelectedOption","inputValue","setInputValue","customStyles","control","provided","borderRadius","border","padding","fontSize","menu","zIndex","fetchCities","input","response","get","params","query","cityOptions","data","map","city","value","label","country","error","console","debouncedFetchCities","handleInputChange","newValue","action","handleChange","option","cityOnly","split","trim","isLoading","onInputChange","onChange","placeholder","noOptionsMessage","styles","blurInputOnSelect","backspaceRemovesValue","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/joke/weather-frontend/src/components/CityAutocomplete.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\n\nconst CityAutocomplete = ({ onCitySelect, isAutocompleteEnabled }) => {\n  const [options, setOptions] = useState([]); // Opciones del autocompletado\n  const [loading, setLoading] = useState(false); // Estado de carga\n  const [selectedOption, setSelectedOption] = useState(null); // Opción seleccionada\n  const [inputValue, setInputValue] = useState(\"\"); // Valor del input\n\n  // Estilos personalizados\n  const customStyles = {\n    control: (provided) => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\",\n    }),\n    menu: (provided) => ({\n      ...provided,\n      zIndex: 999,\n    }),\n  };\n\n  // Llamada a la API para obtener ciudades\n  const fetchCities = async (input) => {\n    if (!input) return;\n    setLoading(true);\n    try {\n      const response = await axios.get(\"http://localhost:8080/api/geo/cities\", {\n        params: { query: input },\n      });\n      const cityOptions = response.data.map((city) => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`,\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n      setOptions([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Debounce para limitar llamadas a la API\n  const debouncedFetchCities = debounce((input) => {\n    if (isAutocompleteEnabled && input) {\n      fetchCities(input);\n    }\n  }, 300);\n\n  // Manejar cambios en el input\n  const handleInputChange = (newValue, { action }) => {\n    if (action === \"input-change\") {\n      setInputValue(newValue); // Actualiza el valor del input\n      debouncedFetchCities(newValue); // Realiza la búsqueda si está habilitado\n      if (!isAutocompleteEnabled) {\n        onCitySelect(newValue); // Envía el valor manualmente al componente padre\n      }\n    }\n  };\n\n  // Manejar la selección de una opción\n  const handleChange = (option) => {\n    if (option) {\n      const cityOnly = option.value.split(\",\")[0].trim(); // Extrae solo la ciudad\n      setSelectedOption(option);\n      setInputValue(option.label);\n      onCitySelect(cityOnly); // Envía solo la ciudad al componente padre\n    }\n  };\n  \n\n  return (\n    <Select\n      options={isAutocompleteEnabled ? options : []} // Opciones solo si está habilitado\n      isLoading={loading} // Estado de carga\n      value={selectedOption} // Opción seleccionada\n      inputValue={inputValue} // Valor del input\n      onInputChange={handleInputChange} // Maneja cambios en el input\n      onChange={handleChange} // Maneja selección de una opción\n      placeholder=\"Ingresa una ciudad\"\n      noOptionsMessage={() =>\n        isAutocompleteEnabled && inputValue ? \"Sin resultados\" : null\n      } // Oculta mensaje cuando no es necesario\n      styles={customStyles}\n      blurInputOnSelect={false} // Evita borrar el input al seleccionar\n      backspaceRemovesValue={false} // Evita borrar opción seleccionada con Backspace\n    />\n  );\n};\n\nexport default CityAutocomplete;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,QAAQ,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAsB,CAAC,KAAK;EAAAC,EAAA;EACpE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElD;EACA,MAAMkB,YAAY,GAAG;IACnBC,OAAO,EAAGC,QAAQ,KAAM;MACtB,GAAGA,QAAQ;MACXC,YAAY,EAAE,KAAK;MACnBC,MAAM,EAAE,gBAAgB;MACxBC,OAAO,EAAE,KAAK;MACdC,QAAQ,EAAE;IACZ,CAAC,CAAC;IACFC,IAAI,EAAGL,QAAQ,KAAM;MACnB,GAAGA,QAAQ;MACXM,MAAM,EAAE;IACV,CAAC;EACH,CAAC;;EAED;EACA,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;IACnC,IAAI,CAACA,KAAK,EAAE;IACZf,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMgB,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAAC,sCAAsC,EAAE;QACvEC,MAAM,EAAE;UAAEC,KAAK,EAAEJ;QAAM;MACzB,CAAC,CAAC;MACF,MAAMK,WAAW,GAAGJ,QAAQ,CAACK,IAAI,CAACC,GAAG,CAAEC,IAAI,KAAM;QAC/CC,KAAK,EAAED,IAAI,CAACA,IAAI;QAChBE,KAAK,EAAE,GAAGF,IAAI,CAACA,IAAI,KAAKA,IAAI,CAACG,OAAO;MACtC,CAAC,CAAC,CAAC;MACH5B,UAAU,CAACsB,WAAW,CAAC;IACzB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C7B,UAAU,CAAC,EAAE,CAAC;IAChB,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAM6B,oBAAoB,GAAGvC,QAAQ,CAAEyB,KAAK,IAAK;IAC/C,IAAIpB,qBAAqB,IAAIoB,KAAK,EAAE;MAClCD,WAAW,CAACC,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,GAAG,CAAC;;EAEP;EACA,MAAMe,iBAAiB,GAAGA,CAACC,QAAQ,EAAE;IAAEC;EAAO,CAAC,KAAK;IAClD,IAAIA,MAAM,KAAK,cAAc,EAAE;MAC7B5B,aAAa,CAAC2B,QAAQ,CAAC,CAAC,CAAC;MACzBF,oBAAoB,CAACE,QAAQ,CAAC,CAAC,CAAC;MAChC,IAAI,CAACpC,qBAAqB,EAAE;QAC1BD,YAAY,CAACqC,QAAQ,CAAC,CAAC,CAAC;MAC1B;IACF;EACF,CAAC;;EAED;EACA,MAAME,YAAY,GAAIC,MAAM,IAAK;IAC/B,IAAIA,MAAM,EAAE;MACV,MAAMC,QAAQ,GAAGD,MAAM,CAACV,KAAK,CAACY,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MACpDnC,iBAAiB,CAACgC,MAAM,CAAC;MACzB9B,aAAa,CAAC8B,MAAM,CAACT,KAAK,CAAC;MAC3B/B,YAAY,CAACyC,QAAQ,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC;EAGD,oBACE3C,OAAA,CAACH,MAAM;IACLQ,OAAO,EAAEF,qBAAqB,GAAGE,OAAO,GAAG,EAAG,CAAC;IAAA;IAC/CyC,SAAS,EAAEvC,OAAQ,CAAC;IAAA;IACpByB,KAAK,EAAEvB,cAAe,CAAC;IAAA;IACvBE,UAAU,EAAEA,UAAW,CAAC;IAAA;IACxBoC,aAAa,EAAET,iBAAkB,CAAC;IAAA;IAClCU,QAAQ,EAAEP,YAAa,CAAC;IAAA;IACxBQ,WAAW,EAAC,oBAAoB;IAChCC,gBAAgB,EAAEA,CAAA,KAChB/C,qBAAqB,IAAIQ,UAAU,GAAG,gBAAgB,GAAG,IAC1D,CAAC;IAAA;IACFwC,MAAM,EAAEtC,YAAa;IACrBuC,iBAAiB,EAAE,KAAM,CAAC;IAAA;IAC1BC,qBAAqB,EAAE,KAAM,CAAC;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEN,CAAC;AAACrD,EAAA,CAxFIH,gBAAgB;AAAAyD,EAAA,GAAhBzD,gBAAgB;AA0FtB,eAAeA,gBAAgB;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}