{"ast":null,"code":"var _jsxFileName = \"/home/joke/weather-frontend/src/components/CityAutocomplete.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\nimport \"./CityAutocomplete.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityAutocomplete = ({\n  onCitySelect\n}) => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null); // Estado para manejar la opción seleccionada\n\n  // Define estilos personalizados para React Select\n  const customStyles = {\n    control: provided => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\"\n    }),\n    menu: provided => ({\n      ...provided,\n      borderRadius: \"8px\",\n      marginTop: \"5px\",\n      zIndex: 10,\n      // Controla la superposición\n      position: \"relative\"\n    }),\n    placeholder: provided => ({\n      ...provided,\n      fontStyle: \"italic\",\n      color: \"#aaa\"\n    })\n  };\n\n  // Función para obtener las ciudades\n  const fetchCities = async inputValue => {\n    if (!inputValue) return;\n    setLoading(true);\n    try {\n      const response = await axios.get(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities\", {\n        params: {\n          namePrefix: inputValue\n        },\n        headers: {\n          \"X-RapidAPI-Key\": \"TU_API_KEY\",\n          // Reemplaza con tu API key\n          \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\"\n        }\n      });\n      const cityOptions = response.data.data.map(city => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n      setOptions([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Debounce para evitar demasiadas llamadas\n  const debouncedFetchCities = debounce(inputValue => {\n    fetchCities(inputValue);\n  }, 300);\n\n  // Manejar cambios en el input\n  const handleInputChange = inputValue => {\n    if (inputValue) debouncedFetchCities(inputValue);\n  };\n\n  // Manejar la selección de una ciudad\n  const handleChange = option => {\n    setSelectedOption(option); // Guarda la opción seleccionada\n    onCitySelect(option === null || option === void 0 ? void 0 : option.value); // Devuelve la ciudad seleccionada al padre\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete-container\",\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      value: selectedOption // Controla el valor seleccionado\n      ,\n      options: options,\n      isLoading: loading,\n      onInputChange: handleInputChange,\n      onChange: handleChange,\n      placeholder: \"Ingresa una ciudad\",\n      noOptionsMessage: () => \"Sin resultados\",\n      styles: customStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"consult-button\",\n      onClick: () => console.log(\"Ciudad seleccionada:\", selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value),\n      children: \"Consultar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(CityAutocomplete, \"aE2STYVETItbOxgSM5+rFe1Pjek=\");\n_c = CityAutocomplete;\nexport default CityAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"CityAutocomplete\");","map":{"version":3,"names":["React","useState","axios","Select","debounce","jsxDEV","_jsxDEV","CityAutocomplete","onCitySelect","_s","options","setOptions","loading","setLoading","selectedOption","setSelectedOption","customStyles","control","provided","borderRadius","border","padding","fontSize","menu","marginTop","zIndex","position","placeholder","fontStyle","color","fetchCities","inputValue","response","get","params","namePrefix","headers","cityOptions","data","map","city","value","label","country","error","console","debouncedFetchCities","handleInputChange","handleChange","option","className","children","isLoading","onInputChange","onChange","noOptionsMessage","styles","fileName","_jsxFileName","lineNumber","columnNumber","onClick","log","_c","$RefreshReg$"],"sources":["/home/joke/weather-frontend/src/components/CityAutocomplete.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\nimport \"./CityAutocomplete.css\";\n\nconst CityAutocomplete = ({ onCitySelect }) => {\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null); // Estado para manejar la opción seleccionada\n\n  // Define estilos personalizados para React Select\n  const customStyles = {\n    control: (provided) => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\",\n    }),\n    menu: (provided) => ({\n      ...provided,\n      borderRadius: \"8px\",\n      marginTop: \"5px\",\n      zIndex: 10, // Controla la superposición\n      position: \"relative\",\n    }),\n    placeholder: (provided) => ({\n      ...provided,\n      fontStyle: \"italic\",\n      color: \"#aaa\",\n    }),\n  };\n\n  // Función para obtener las ciudades\n  const fetchCities = async (inputValue) => {\n    if (!inputValue) return;\n\n    setLoading(true);\n    try {\n      const response = await axios.get(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities\", {\n        params: { namePrefix: inputValue },\n        headers: {\n          \"X-RapidAPI-Key\": \"TU_API_KEY\", // Reemplaza con tu API key\n          \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\",\n        },\n      });\n\n      const cityOptions = response.data.data.map((city) => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`,\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n      setOptions([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Debounce para evitar demasiadas llamadas\n  const debouncedFetchCities = debounce((inputValue) => {\n    fetchCities(inputValue);\n  }, 300);\n\n  // Manejar cambios en el input\n  const handleInputChange = (inputValue) => {\n    if (inputValue) debouncedFetchCities(inputValue);\n  };\n\n  // Manejar la selección de una ciudad\n  const handleChange = (option) => {\n    setSelectedOption(option); // Guarda la opción seleccionada\n    onCitySelect(option?.value); // Devuelve la ciudad seleccionada al padre\n  };\n\n  return (\n    <div className=\"autocomplete-container\">\n      <Select\n        value={selectedOption} // Controla el valor seleccionado\n        options={options}\n        isLoading={loading}\n        onInputChange={handleInputChange}\n        onChange={handleChange}\n        placeholder=\"Ingresa una ciudad\"\n        noOptionsMessage={() => \"Sin resultados\"}\n        styles={customStyles}\n      />\n      <button\n        className=\"consult-button\"\n        onClick={() => console.log(\"Ciudad seleccionada:\", selectedOption?.value)}\n      >\n        Consultar\n      </button>\n    </div>\n  );\n};\n\nexport default CityAutocomplete;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}