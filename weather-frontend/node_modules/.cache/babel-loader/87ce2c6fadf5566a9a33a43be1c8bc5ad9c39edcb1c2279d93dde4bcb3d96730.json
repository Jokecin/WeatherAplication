{"ast":null,"code":"var _jsxFileName = \"/home/joke/weather-frontend/src/components/CityAutocomplete.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityAutocomplete = ({\n  onCitySelect\n}) => {\n  _s();\n  const [options, setOptions] = useState([]); // Opciones del autocompletado\n  const [loading, setLoading] = useState(false); // Estado de carga\n  const [inputValue, setInputValue] = useState(\"\"); // Valor temporal del input\n\n  const customStyles = {\n    control: provided => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\"\n    }),\n    menu: provided => ({\n      ...provided,\n      zIndex: 1000\n    })\n  };\n  const fetchCities = async input => {\n    if (!input) return;\n    setLoading(true);\n    try {\n      const response = await axios.get(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities\", {\n        params: {\n          namePrefix: input\n        },\n        headers: {\n          \"X-RapidAPI-Key\": \"TU_API_KEY\",\n          \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\"\n        }\n      });\n      const cityOptions = response.data.data.map(city => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const debouncedFetchCities = debounce(input => fetchCities(input), 300);\n  const handleInputChange = newValue => {\n    setInputValue(newValue);\n    debouncedFetchCities(newValue);\n  };\n  const handleChange = option => {\n    setInputValue(option.label); // Mostrar el valor seleccionado en el input\n    onCitySelect(option.value); // Envía la ciudad seleccionada al padre\n  };\n  return /*#__PURE__*/_jsxDEV(Select, {\n    options: options,\n    inputValue: inputValue,\n    isLoading: loading,\n    onInputChange: handleInputChange,\n    onChange: handleChange,\n    placeholder: \"Ingresa una ciudad\",\n    styles: customStyles,\n    noOptionsMessage: () => \"Sin resultados\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(CityAutocomplete, \"wrYWOxSalb1LkmbS+EFtTLaVsYA=\");\n_c = CityAutocomplete;\nexport default CityAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"CityAutocomplete\");","map":{"version":3,"names":["React","useState","axios","Select","debounce","jsxDEV","_jsxDEV","CityAutocomplete","onCitySelect","_s","options","setOptions","loading","setLoading","inputValue","setInputValue","customStyles","control","provided","borderRadius","border","padding","fontSize","menu","zIndex","fetchCities","input","response","get","params","namePrefix","headers","cityOptions","data","map","city","value","label","country","error","console","debouncedFetchCities","handleInputChange","newValue","handleChange","option","isLoading","onInputChange","onChange","placeholder","styles","noOptionsMessage","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/joke/weather-frontend/src/components/CityAutocomplete.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport debounce from \"lodash.debounce\";\n\nconst CityAutocomplete = ({ onCitySelect }) => {\n  const [options, setOptions] = useState([]); // Opciones del autocompletado\n  const [loading, setLoading] = useState(false); // Estado de carga\n  const [inputValue, setInputValue] = useState(\"\"); // Valor temporal del input\n\n  const customStyles = {\n    control: (provided) => ({\n      ...provided,\n      borderRadius: \"8px\",\n      border: \"1px solid #ccc\",\n      padding: \"5px\",\n      fontSize: \"16px\",\n    }),\n    menu: (provided) => ({\n      ...provided,\n      zIndex: 1000,\n    }),\n  };\n\n  const fetchCities = async (input) => {\n    if (!input) return;\n    setLoading(true);\n    try {\n      const response = await axios.get(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities\", {\n        params: { namePrefix: input },\n        headers: {\n          \"X-RapidAPI-Key\": \"TU_API_KEY\",\n          \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\",\n        },\n      });\n      const cityOptions = response.data.data.map((city) => ({\n        value: city.city,\n        label: `${city.city}, ${city.country}`,\n      }));\n      setOptions(cityOptions);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const debouncedFetchCities = debounce((input) => fetchCities(input), 300);\n\n  const handleInputChange = (newValue) => {\n    setInputValue(newValue);\n    debouncedFetchCities(newValue);\n  };\n\n  const handleChange = (option) => {\n    setInputValue(option.label); // Mostrar el valor seleccionado en el input\n    onCitySelect(option.value); // Envía la ciudad seleccionada al padre\n  };\n\n  return (\n    <Select\n      options={options}\n      inputValue={inputValue}\n      isLoading={loading}\n      onInputChange={handleInputChange}\n      onChange={handleChange}\n      placeholder=\"Ingresa una ciudad\"\n      styles={customStyles}\n      noOptionsMessage={() => \"Sin resultados\"}\n    />\n  );\n};\n\nexport default CityAutocomplete;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}